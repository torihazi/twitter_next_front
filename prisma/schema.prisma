generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod"
  useMultipleFiles                 = "true"
  createPartialTypes               = "true"
  addInputTypeValidation           = "true"
  createOptionalDefaultValuesTypes = "true"
  createInputTypes                 = "false"
  writeBarrelFiles                 = "false"
  createModelTypes                 = "true"
  createRelationValuesTypes        = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model schema_migrations {
  version String @id @db.VarChar
}

model tasks {
  id          BigInt   @id @default(autoincrement())
  title       String   @db.VarChar
  description String
  status      Int
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)
}

model users {
  id                     BigInt    @id @default(autoincrement())
  /// @zod.string.min(1,{message: "Required"}).email()
  email                  String    @unique(map: "index_users_on_email") @default("") @db.VarChar
  encrypted_password     String    @default("") @db.VarChar
  /// @zod.string.min(1,{message: "Required"})
  name                   String    @default("") @db.VarChar(50)
  profile                String?   @db.VarChar
  place                  String?   @db.VarChar
  web                    String?   @db.VarChar
  birth                  String?   @db.VarChar
  reset_password_token   String?   @unique(map: "index_users_on_reset_password_token") @db.VarChar
  reset_password_sent_at DateTime? @db.Timestamp(6)
  remember_created_at    DateTime? @db.Timestamp(6)
  confirmation_token     String?   @unique(map: "index_users_on_confirmation_token") @db.VarChar
  confirmed_at           DateTime? @db.Timestamp(6)
  confirmation_sent_at   DateTime? @db.Timestamp(6)
  unconfirmed_email      String?   @db.VarChar
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime  @db.Timestamp(6)
  jti                    String    @unique(map: "index_users_on_jti") @default("") @db.VarChar
  tweets                 tweets[]
}

model tweets {
  id         BigInt   @id @default(autoincrement())
  /// @zod.string.max(150,{message: "Maximum 150 characters"})
  content    String?  @db.VarChar(150)
  user_id    BigInt
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_003928b7f5")

  @@index([user_id], map: "index_tweets_on_user_id")
}

model active_storage_attachments {
  id                   BigInt               @id @default(autoincrement())
  name                 String               @db.VarChar
  record_type          String               @db.VarChar
  record_id            BigInt
  blob_id              BigInt
  created_at           DateTime             @db.Timestamp(6)
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3b3935057")

  @@unique([record_type, record_id, name, blob_id], map: "index_active_storage_attachments_uniqueness")
  @@index([blob_id], map: "index_active_storage_attachments_on_blob_id")
}

model active_storage_blobs {
  id                             BigInt                           @id @default(autoincrement())
  key                            String                           @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename                       String                           @db.VarChar
  content_type                   String?                          @db.VarChar
  metadata                       String?
  service_name                   String                           @db.VarChar
  byte_size                      BigInt
  checksum                       String?                          @db.VarChar
  created_at                     DateTime                         @db.Timestamp(6)
  active_storage_attachments     active_storage_attachments[]
  active_storage_variant_records active_storage_variant_records[]
}

model active_storage_variant_records {
  id                   BigInt               @id @default(autoincrement())
  blob_id              BigInt
  variation_digest     String               @db.VarChar
  active_storage_blobs active_storage_blobs @relation(fields: [blob_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_993965df05")

  @@unique([blob_id, variation_digest], map: "index_active_storage_variant_records_uniqueness")
}
