generator zod {
  provider                         = "zod-prisma-types"
  output                           = "./generated/zod"
  useMultipleFiles                 = "true"
  createPartialTypes               = "true"
  addInputTypeValidation           = "true"
  createOptionalDefaultValuesTypes = "true"
  createInputTypes                 = "false"
  writeBarrelFiles                 = "false"
  createModelTypes                 = "true"
  createRelationValuesTypes        = "true"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ArInternalMetadata {
  key       String   @id @db.VarChar
  value     String?  @db.VarChar
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)

  @@map("ar_internal_metadata")
}

model SchemaMigrations {
  version String @id @db.VarChar

  @@map("schema_migrations")
}

model Tasks {
  id          BigInt   @id @default(autoincrement())
  title       String   @db.VarChar
  description String
  status      Int
  createdAt   DateTime @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @map("updated_at") @db.Timestamp(6)

  @@map("tasks")
}

model Users {
  id                  BigInt    @id @default(autoincrement())
  /// @zod.string.min(1,{message: "Required"}).email()
  email               String    @unique(map: "index_users_on_email") @default("") @db.VarChar
  encryptedPassword   String    @default("") @map("encrypted_password") @db.VarChar
  /// @zod.string.min(1,{message: "Required"})
  name                String    @default("") @db.VarChar(50)
  profile             String?   @db.VarChar
  place               String?   @db.VarChar
  web                 String?   @db.VarChar
  birth               String?   @db.VarChar
  resetPasswordToken  String?   @unique(map: "index_users_on_reset_password_token") @map("reset_password_token") @db.VarChar
  resetPasswordSentAt DateTime? @map("reset_password_sent_at") @db.Timestamp(6)
  rememberCreatedAt   DateTime? @map("remember_created_at") @db.Timestamp(6)
  confirmationToken   String?   @unique(map: "index_users_on_confirmation_token") @map("confirmation_token") @db.VarChar
  confirmedAt         DateTime? @map("confirmed_at") @db.Timestamp(6)
  confirmationSentAt  DateTime? @map("confirmation_sent_at") @db.Timestamp(6)
  unconfirmedEmail    String?   @map("unconfirmed_email") @db.VarChar
  createdAt           DateTime  @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime  @map("updated_at") @db.Timestamp(6)
  jti                 String    @unique(map: "index_users_on_jti") @default("") @db.VarChar
  tweets              Tweets[]

  @@map("users")
}

model Tweets {
  id        BigInt   @id @default(autoincrement())
  /// @zod.string.max(150,{message: "Maximum 150 characters"})
  content   String?  @db.VarChar(150)
  userId    BigInt   @map("user_id")
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  users     Users    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_003928b7f5")

  @@index([userId], map: "index_tweets_on_user_id")
  @@map("tweets")
}

model ActiveStorageAttachments {
  id                 BigInt             @id @default(autoincrement())
  name               String             @db.VarChar
  recordType         String             @map("record_type") @db.VarChar
  recordId           BigInt             @map("record_id")
  blobId             BigInt             @map("blob_id")
  createdAt          DateTime           @map("created_at") @db.Timestamp(6)
  activeStorageBlobs ActiveStorageBlobs @relation(fields: [blobId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_c3b3935057")

  @@unique([recordType, recordId, name, blobId], map: "index_active_storage_attachments_uniqueness")
  @@index([blobId], map: "index_active_storage_attachments_on_blob_id")
  @@map("active_storage_attachments")
}

model ActiveStorageBlobs {
  id                          BigInt                        @id @default(autoincrement())
  key                         String                        @unique(map: "index_active_storage_blobs_on_key") @db.VarChar
  filename                    String                        @db.VarChar
  contentType                 String?                       @map("content_type") @db.VarChar
  metadata                    String?
  serviceName                 String                        @map("service_name") @db.VarChar
  byteSize                    BigInt                        @map("byte_size")
  checksum                    String?                       @db.VarChar
  createdAt                   DateTime                      @map("created_at") @db.Timestamp(6)
  activeStorageAttachments    ActiveStorageAttachments[]
  activeStorageVariantRecords ActiveStorageVariantRecords[]

  @@map("active_storage_blobs")
}

model ActiveStorageVariantRecords {
  id                 BigInt             @id @default(autoincrement())
  blobId             BigInt             @map("blob_id")
  variationDigest    String             @map("variation_digest") @db.VarChar
  activeStorageBlobs ActiveStorageBlobs @relation(fields: [blobId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_993965df05")

  @@unique([blobId, variationDigest], map: "index_active_storage_variant_records_uniqueness")
  @@map("active_storage_variant_records")
}
